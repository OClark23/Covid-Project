import React, { Component } from 'react';
import { Link } from 'react-router-dom';
import { useTable } from 'react-table';
import { DeleteButton } from '../components/buttons';
import api from '../api';
import './itemsList.css';

import MaUTable from '@material-ui/core/Table';
import { CssBaseline, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';

import styled from 'styled-components';

const Wrapper = styled.div`
  padding: 0 40px 40px 40px;

  @media screen and (max-width: 420px) {
    padding-left: 0.5em;
    padding-right: 0.5em;
  }
`;


const Table = ({ columns, data }) => {
  const { getTableProps, headerGroups, rows, prepareRow } = useTable({
    columns,
    data,
  });

  return (
    <div>
      <div className='svg-title'>
      <svg width="541" height="51" viewBox="0 0 541 51" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M30.875 50H0.15625V5.1875H30.875V14.1562H9.125V23.125H23.8438V32.0938H9.125V41.0312H30.875V50ZM67.0625 50H56.625L49.9688 39.75L43.25 50H32.8125L45.0312 32.8438L32.8125 16.3438H43.25L49.9688 25.9375L56.625 16.3438H67.0625L54.8125 32.8438L67.0625 50ZM101.094 50H99.0312L95.7188 45.4062C94.9062 46.1354 94.0417 46.8229 93.125 47.4688C92.2292 48.0938 91.2812 48.6458 90.2812 49.125C89.2812 49.5833 88.25 49.9479 87.1875 50.2188C86.1458 50.4896 85.0833 50.625 84 50.625C81.6458 50.625 79.4271 50.2292 77.3438 49.4375C75.2812 48.6458 73.4688 47.5 71.9062 46C70.3646 44.4792 69.1458 42.625 68.25 40.4375C67.3542 38.25 66.9062 35.7604 66.9062 32.9688C66.9062 30.3646 67.3542 27.9792 68.25 25.8125C69.1458 23.625 70.3646 21.75 71.9062 20.1875C73.4688 18.625 75.2812 17.4167 77.3438 16.5625C79.4271 15.6875 81.6458 15.25 84 15.25C85.0833 15.25 86.1562 15.3854 87.2188 15.6562C88.2812 15.9271 89.3125 16.3021 90.3125 16.7812C91.3125 17.2604 92.2604 17.8229 93.1562 18.4688C94.0729 19.1146 94.9271 19.8125 95.7188 20.5625L99.0312 16.5938H101.094V50ZM92.5 32.9688C92.5 31.8021 92.2708 30.6771 91.8125 29.5938C91.375 28.4896 90.7708 27.5208 90 26.6875C89.2292 25.8333 88.3229 25.1562 87.2812 24.6562C86.2604 24.1354 85.1667 23.875 84 23.875C82.8333 23.875 81.7292 24.0729 80.6875 24.4688C79.6667 24.8646 78.7708 25.4479 78 26.2188C77.25 26.9896 76.6562 27.9479 76.2188 29.0938C75.7812 30.2188 75.5625 31.5104 75.5625 32.9688C75.5625 34.4271 75.7812 35.7292 76.2188 36.875C76.6562 38 77.25 38.9479 78 39.7188C78.7708 40.4896 79.6667 41.0729 80.6875 41.4688C81.7292 41.8646 82.8333 42.0625 84 42.0625C85.1667 42.0625 86.2604 41.8125 87.2812 41.3125C88.3229 40.7917 89.2292 40.1146 90 39.2812C90.7708 38.4271 91.375 37.4583 91.8125 36.375C92.2708 35.2708 92.5 34.1354 92.5 32.9688ZM150.188 50H141.688V28.75C141.688 28.1667 141.573 27.6146 141.344 27.0938C141.135 26.5729 140.833 26.1146 140.438 25.7188C140.042 25.3229 139.583 25.0208 139.062 24.8125C138.542 24.5833 137.99 24.4688 137.406 24.4688C136.823 24.4688 136.271 24.5833 135.75 24.8125C135.25 25.0208 134.802 25.3229 134.406 25.7188C134.031 26.1146 133.729 26.5729 133.5 27.0938C133.292 27.6146 133.188 28.1667 133.188 28.75V50H124.656V28.75C124.656 28.1667 124.542 27.6146 124.312 27.0938C124.104 26.5729 123.802 26.1146 123.406 25.7188C123.01 25.3229 122.552 25.0208 122.031 24.8125C121.51 24.5833 120.958 24.4688 120.375 24.4688C119.792 24.4688 119.24 24.5833 118.719 24.8125C118.219 25.0208 117.771 25.3229 117.375 25.7188C117 26.1146 116.698 26.5729 116.469 27.0938C116.26 27.6146 116.156 28.1667 116.156 28.75V50H107.625V16.5312H109.688L112 19.0938C113.188 18.0938 114.49 17.3229 115.906 16.7812C117.344 16.2188 118.833 15.9375 120.375 15.9375C121.938 15.9375 123.458 16.2292 124.938 16.8125C126.438 17.3958 127.75 18.4062 128.875 19.8438C129.396 19.1354 129.99 18.5312 130.656 18.0312C131.323 17.5312 132.021 17.125 132.75 16.8125C133.5 16.5 134.271 16.2812 135.062 16.1562C135.854 16.0104 136.635 15.9375 137.406 15.9375C139.177 15.9375 140.833 16.2708 142.375 16.9375C143.938 17.6042 145.292 18.5208 146.438 19.6875C147.604 20.8333 148.521 22.1875 149.188 23.75C149.854 25.3125 150.188 26.9792 150.188 28.75V50ZM211.188 27.5938C211.188 29.6562 210.917 31.6458 210.375 33.5625C209.854 35.4583 209.104 37.2396 208.125 38.9062C207.146 40.5521 205.979 42.0625 204.625 43.4375C203.271 44.7917 201.76 45.9583 200.094 46.9375C198.427 47.9167 196.635 48.6771 194.719 49.2188C192.823 49.7396 190.844 50 188.781 50H175.281V5.1875H188.781C190.844 5.1875 192.823 5.45833 194.719 6C196.635 6.52083 198.427 7.27083 200.094 8.25C201.76 9.22917 203.271 10.4062 204.625 11.7812C205.979 13.1354 207.146 14.6458 208.125 16.3125C209.104 17.9583 209.854 19.7396 210.375 21.6562C210.917 23.5521 211.188 25.5312 211.188 27.5938ZM202.219 27.5938C202.219 25.7396 201.865 24 201.156 22.375C200.469 20.75 199.51 19.3333 198.281 18.125C197.073 16.8958 195.646 15.9271 194 15.2188C192.375 14.5104 190.635 14.1562 188.781 14.1562H184.312V41.0312H188.781C190.635 41.0312 192.375 40.6875 194 40C195.646 39.2917 197.073 38.3333 198.281 37.125C199.51 35.8958 200.469 34.4688 201.156 32.8438C201.865 31.1979 202.219 29.4479 202.219 27.5938ZM229.562 41.8125C229.896 41.9167 230.229 41.9896 230.562 42.0312C230.896 42.0521 231.229 42.0625 231.562 42.0625C232.396 42.0625 233.198 41.9479 233.969 41.7188C234.74 41.4896 235.458 41.1667 236.125 40.75C236.812 40.3125 237.417 39.7917 237.938 39.1875C238.479 38.5625 238.917 37.875 239.25 37.125L245.5 43.4062C244.708 44.5312 243.792 45.5417 242.75 46.4375C241.729 47.3333 240.615 48.0938 239.406 48.7188C238.219 49.3438 236.958 49.8125 235.625 50.125C234.312 50.4583 232.958 50.625 231.562 50.625C229.208 50.625 226.99 50.1875 224.906 49.3125C222.844 48.4375 221.031 47.2188 219.469 45.6562C217.927 44.0938 216.708 42.2396 215.812 40.0938C214.917 37.9271 214.469 35.5521 214.469 32.9688C214.469 30.3229 214.917 27.9062 215.812 25.7188C216.708 23.5312 217.927 21.6667 219.469 20.125C221.031 18.5833 222.844 17.3854 224.906 16.5312C226.99 15.6771 229.208 15.25 231.562 15.25C232.958 15.25 234.323 15.4167 235.656 15.75C236.99 16.0833 238.25 16.5625 239.438 17.1875C240.646 17.8125 241.771 18.5833 242.812 19.5C243.854 20.3958 244.771 21.4062 245.562 22.5312L229.562 41.8125ZM233.938 24.2188C233.542 24.0729 233.146 23.9792 232.75 23.9375C232.375 23.8958 231.979 23.875 231.562 23.875C230.396 23.875 229.292 24.0938 228.25 24.5312C227.229 24.9479 226.333 25.5521 225.562 26.3438C224.812 27.1354 224.219 28.0938 223.781 29.2188C223.344 30.3229 223.125 31.5729 223.125 32.9688C223.125 33.2812 223.135 33.6354 223.156 34.0312C223.198 34.4271 223.25 34.8333 223.312 35.25C223.396 35.6458 223.49 36.0312 223.594 36.4062C223.698 36.7812 223.833 37.1146 224 37.4062L233.938 24.2188ZM260.719 50H252.188V25.0312H248.031V16.5312H252.188V14.9375C252.188 12.875 252.573 10.9375 253.344 9.125C254.135 7.3125 255.208 5.73958 256.562 4.40625C257.938 3.05208 259.531 1.98958 261.344 1.21875C263.156 0.427083 265.094 0.03125 267.156 0.03125H273.562V8.53125H267.156C266.24 8.53125 265.385 8.69792 264.594 9.03125C263.823 9.34375 263.146 9.79167 262.562 10.375C262 10.9375 261.552 11.6146 261.219 12.4062C260.885 13.1771 260.719 14.0208 260.719 14.9375V16.5312H271.188V25.0312H260.719V50ZM307.031 50H304.969L301.656 45.4062C300.844 46.1354 299.979 46.8229 299.062 47.4688C298.167 48.0938 297.219 48.6458 296.219 49.125C295.219 49.5833 294.188 49.9479 293.125 50.2188C292.083 50.4896 291.021 50.625 289.938 50.625C287.583 50.625 285.365 50.2292 283.281 49.4375C281.219 48.6458 279.406 47.5 277.844 46C276.302 44.4792 275.083 42.625 274.188 40.4375C273.292 38.25 272.844 35.7604 272.844 32.9688C272.844 30.3646 273.292 27.9792 274.188 25.8125C275.083 23.625 276.302 21.75 277.844 20.1875C279.406 18.625 281.219 17.4167 283.281 16.5625C285.365 15.6875 287.583 15.25 289.938 15.25C291.021 15.25 292.094 15.3854 293.156 15.6562C294.219 15.9271 295.25 16.3021 296.25 16.7812C297.25 17.2604 298.198 17.8229 299.094 18.4688C300.01 19.1146 300.865 19.8125 301.656 20.5625L304.969 16.5938H307.031V50ZM298.438 32.9688C298.438 31.8021 298.208 30.6771 297.75 29.5938C297.312 28.4896 296.708 27.5208 295.938 26.6875C295.167 25.8333 294.26 25.1562 293.219 24.6562C292.198 24.1354 291.104 23.875 289.938 23.875C288.771 23.875 287.667 24.0729 286.625 24.4688C285.604 24.8646 284.708 25.4479 283.938 26.2188C283.188 26.9896 282.594 27.9479 282.156 29.0938C281.719 30.2188 281.5 31.5104 281.5 32.9688C281.5 34.4271 281.719 35.7292 282.156 36.875C282.594 38 283.188 38.9479 283.938 39.7188C284.708 40.4896 285.604 41.0729 286.625 41.4688C287.667 41.8646 288.771 42.0625 289.938 42.0625C291.104 42.0625 292.198 41.8125 293.219 41.3125C294.26 40.7917 295.167 40.1146 295.938 39.2812C296.708 38.4271 297.312 37.4583 297.75 36.375C298.208 35.2708 298.438 34.1354 298.438 32.9688ZM338.156 46.0938C337.469 46.7188 336.729 47.3125 335.938 47.875C335.167 48.4167 334.354 48.8958 333.5 49.3125C332.646 49.7083 331.76 50.0208 330.844 50.25C329.948 50.5 329.031 50.625 328.094 50.625C326.031 50.625 324.094 50.2604 322.281 49.5312C320.469 48.8021 318.875 47.7708 317.5 46.4375C316.146 45.0833 315.073 43.4479 314.281 41.5312C313.51 39.5938 313.125 37.4271 313.125 35.0312V16.5312H321.625V35.0312C321.625 36.1562 321.792 37.1667 322.125 38.0625C322.479 38.9375 322.948 39.6771 323.531 40.2812C324.115 40.8854 324.792 41.3438 325.562 41.6562C326.354 41.9688 327.198 42.125 328.094 42.125C328.969 42.125 329.792 41.9271 330.562 41.5312C331.354 41.1146 332.042 40.5729 332.625 39.9062C333.208 39.2396 333.667 38.4896 334 37.6562C334.333 36.8021 334.5 35.9271 334.5 35.0312V16.5312H343.031V50H340.969L338.156 46.0938ZM358.156 50H349.562V3.21875H358.156V50ZM381.469 50C379.406 50 377.469 49.6146 375.656 48.8438C373.844 48.0521 372.25 46.9792 370.875 45.625C369.521 44.25 368.448 42.6562 367.656 40.8438C366.885 39.0312 366.5 37.0938 366.5 35.0312V25.0938H362.344V16.5938H366.5V3.21875H375V16.5938H387.938V25.0938H375V35.0312C375 35.9271 375.167 36.7708 375.5 37.5625C375.833 38.3333 376.292 39.0104 376.875 39.5938C377.458 40.1771 378.146 40.6458 378.938 41C379.729 41.3333 380.573 41.5 381.469 41.5H387.938V50H381.469ZM445.844 5.1875L431.125 50H422.156L407.5 5.1875H417.688L426.625 35.0938L435.594 5.1875H445.844ZM459.312 7.4375C459.312 8.22917 459.156 8.96875 458.844 9.65625C458.552 10.3438 458.146 10.9479 457.625 11.4688C457.104 11.9688 456.49 12.375 455.781 12.6875C455.094 12.9792 454.354 13.125 453.562 13.125C452.771 13.125 452.021 12.9792 451.312 12.6875C450.625 12.375 450.021 11.9688 449.5 11.4688C449 10.9479 448.594 10.3438 448.281 9.65625C447.99 8.96875 447.844 8.22917 447.844 7.4375C447.844 6.66667 447.99 5.9375 448.281 5.25C448.594 4.54167 449 3.9375 449.5 3.4375C450.021 2.91667 450.625 2.51042 451.312 2.21875C452.021 1.90625 452.771 1.75 453.562 1.75C454.354 1.75 455.094 1.90625 455.781 2.21875C456.49 2.51042 457.104 2.91667 457.625 3.4375C458.146 3.9375 458.552 4.54167 458.844 5.25C459.156 5.9375 459.312 6.66667 459.312 7.4375ZM457.844 50H449.25V16.5312H457.844V50ZM477.688 41.8125C478.021 41.9167 478.354 41.9896 478.688 42.0312C479.021 42.0521 479.354 42.0625 479.688 42.0625C480.521 42.0625 481.323 41.9479 482.094 41.7188C482.865 41.4896 483.583 41.1667 484.25 40.75C484.938 40.3125 485.542 39.7917 486.062 39.1875C486.604 38.5625 487.042 37.875 487.375 37.125L493.625 43.4062C492.833 44.5312 491.917 45.5417 490.875 46.4375C489.854 47.3333 488.74 48.0938 487.531 48.7188C486.344 49.3438 485.083 49.8125 483.75 50.125C482.438 50.4583 481.083 50.625 479.688 50.625C477.333 50.625 475.115 50.1875 473.031 49.3125C470.969 48.4375 469.156 47.2188 467.594 45.6562C466.052 44.0938 464.833 42.2396 463.938 40.0938C463.042 37.9271 462.594 35.5521 462.594 32.9688C462.594 30.3229 463.042 27.9062 463.938 25.7188C464.833 23.5312 466.052 21.6667 467.594 20.125C469.156 18.5833 470.969 17.3854 473.031 16.5312C475.115 15.6771 477.333 15.25 479.688 15.25C481.083 15.25 482.448 15.4167 483.781 15.75C485.115 16.0833 486.375 16.5625 487.562 17.1875C488.771 17.8125 489.896 18.5833 490.938 19.5C491.979 20.3958 492.896 21.4062 493.688 22.5312L477.688 41.8125ZM482.062 24.2188C481.667 24.0729 481.271 23.9792 480.875 23.9375C480.5 23.8958 480.104 23.875 479.688 23.875C478.521 23.875 477.417 24.0938 476.375 24.5312C475.354 24.9479 474.458 25.5521 473.688 26.3438C472.938 27.1354 472.344 28.0938 471.906 29.2188C471.469 30.3229 471.25 31.5729 471.25 32.9688C471.25 33.2812 471.26 33.6354 471.281 34.0312C471.323 34.4271 471.375 34.8333 471.438 35.25C471.521 35.6458 471.615 36.0312 471.719 36.4062C471.823 36.7812 471.958 37.1146 472.125 37.4062L482.062 24.2188ZM540.25 37.9062C540.25 39.6562 539.917 41.3125 539.25 42.875C538.583 44.4167 537.667 45.7604 536.5 46.9062C535.354 48.0521 534 48.9583 532.438 49.625C530.896 50.2917 529.24 50.625 527.469 50.625C525.885 50.625 524.365 50.3542 522.906 49.8125C521.448 49.25 520.125 48.4375 518.938 47.375C517.771 48.4375 516.458 49.25 515 49.8125C513.562 50.3542 512.042 50.625 510.438 50.625C508.667 50.625 507.01 50.2917 505.469 49.625C503.927 48.9583 502.573 48.0521 501.406 46.9062C500.26 45.7604 499.354 44.4167 498.688 42.875C498.021 41.3125 497.688 39.6562 497.688 37.9062V16.5938H506.219V37.9062C506.219 38.4896 506.323 39.0417 506.531 39.5625C506.76 40.0625 507.062 40.5104 507.438 40.9062C507.833 41.2812 508.281 41.5833 508.781 41.8125C509.302 42.0208 509.854 42.125 510.438 42.125C511.021 42.125 511.573 42.0208 512.094 41.8125C512.615 41.5833 513.073 41.2812 513.469 40.9062C513.865 40.5104 514.167 40.0625 514.375 39.5625C514.604 39.0417 514.719 38.4896 514.719 37.9062V16.5938H523.219V37.9062C523.219 38.4896 523.333 39.0417 523.562 39.5625C523.792 40.0625 524.094 40.5104 524.469 40.9062C524.865 41.2812 525.312 41.5833 525.812 41.8125C526.333 42.0208 526.885 42.125 527.469 42.125C528.052 42.125 528.604 42.0208 529.125 41.8125C529.646 41.5833 530.094 41.2812 530.469 40.9062C530.865 40.5104 531.177 40.0625 531.406 39.5625C531.635 39.0417 531.75 38.4896 531.75 37.9062V16.5938H540.25V37.9062Z" fill="white"/>
</svg>


    </div>
    <div className='itemsList'>
    <MaUTable {...getTableProps()}>
      <TableHead>
        {headerGroups.map(headerGroup => (
          <TableRow {...headerGroup.getHeaderGroupProps()}>
            {headerGroup.headers.map(column => (
              <TableCell {...column.getHeaderProps()}>
                {column.render('Header')}
              </TableCell>
            ))}
          </TableRow>
        ))}
      </TableHead>
      <TableBody>
        {rows.map((row, i) => {
          prepareRow(row);
          return (
            <TableRow data-row-item-id={row.values._id} {...row.getRowProps()}>
              {row.cells.map(cell => {
                return (
                  <TableCell {...cell.getCellProps()}>
                    {cell.render('Cell')}
                  </TableCell>
                );
              })}
            </TableRow>
          );
        })}
      </TableBody>
    </MaUTable>
    </div>
    </div>
  );
};

class ItemsTable extends Component {
  constructor(props) {
    super(props);
    this.state = {
      items: {},
    };
  }

  componentDidMount() {
    console.log('ItemsList: props');
    console.log(this.props);

    this.fetchAllPatients();
  }

  fetchAllPatients = () => {
    api
      .getAllPatients()
      .then(resp => {
        const { items } = resp.data;
        console.log('getAllItems: resp');
        console.log(items);
        this.setState({ items });
      })
      .catch(err => {
        console.error(`ERROR in 'getAllItems': ${err}`);
        console.error(err);
        return err;
      });
  };

  deleteSinglePatient = itemId => {
    return api
      .deletePatientById(itemId)
      .then(resp => {
        console.log('deletePatientById: resp');
        console.log(resp);
        return resp;
      })
      .catch(err => {
        console.error(`ERROR in 'deleteSinglePatient': ${err}`);
        console.error(err);
        return err;
      });
  };

  handleRemoveItem = data => {
    const itemId = data;

    this.deleteSinglePatient(itemId).then(resp => {
      console.log('handleRemoveItem: resp');
      console.log(resp);
      this.fetchAllPatients();
    });
  };

  render() {
    const items = this.state.items || {};
    console.log("===", items);

    const columns = [
      {
        Header: 'Exam ID',
        accessor: '_id',
        // filterable: true,
        Cell: props => {
          const { original } = props.cell.row;
          return (
            <Link data-item-id to={`item/itemPatientExam/${original._id}`}> {`${original._id}`}</Link>
          );
        },
      },
      {
        Header: 'Patient ID',
        accessor: 'PATIENT_ID',
        // filterable: true,
        Cell: props => {
          const { original } = props.cell.row;
          return (
            <Link data-item-id to={`item/patient-info/${original._id}`}> {`${original.PATIENT_ID}`}</Link>
          );
        },
      },
      {
        Header: 'Gender',
        accessor: 'SEX',
        filterable: true,
        Cell: props => {
          const { original } = props.cell.row;
          return <span data-gender={original.SEX}>{props.value}</span>;
        },
      },
    {
      Header: 'Age',
      accessor: 'AGE',
      filterable: true,
      Cell: props => {
        const { original } = props.cell.row;
        return <span data-age={original.AGE}>{props.value}</span>;
      },
    },
    {
      Header: 'Zip',
      accessor: 'ZIP',
      filterable: true,
      Cell: props => {
        const { original } = props.cell.row;
        return <span data-zip={original.ZIP}>{props.value}</span>;
      },
    },
      {
        Header: 'Update',
        accessor: '_update',
        Cell: props => {
          const { original } = props.cell.row;

          return (
            <Link data-update-id={original._id} to={`/item/update/${original._id}`}>
              Update
            </Link>
          );
        },
      },
      {
        Header: 'Delete',
        accessor: '_delete',
        Cell: props => {
          const { original } = props.cell.row;
          return (
            <span data-delete-id={original._id}>
              <DeleteButton id={original._id} onDelete={this.handleRemoveItem} />
            </span>
          );
        },
      },
    ];

    return (
      <Wrapper>
        <CssBaseline />
        {(items || []).length > 0 ? (
          <Table data={items} columns={columns} />
        ) : (
          `No items to render... :(`
        )}
      </Wrapper>
    );
  }
}

export default ItemsTable;
